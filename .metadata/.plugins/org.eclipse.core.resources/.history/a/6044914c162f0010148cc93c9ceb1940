package com.ecommerce.service;

import com.ecommerce.dao.ProductDAO;
import com.ecommerce.exception.OutOfStockException;
import com.ecommerce.exception.ProductNotFoundException;
import com.ecommerce.model.CartItem;
import com.ecommerce.model.Product;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class CartService {
    private List<CartItem> cartItems = new ArrayList<>();
    private ProductDAO productDAO = new ProductDAO();
    
    public void addToCart(int productId, int quantity) 
            throws ProductNotFoundException, OutOfStockException {
        try {
            validateProductExists(productId);
            int availableStock = getAvailableStock(productId);
            
            validateStockAvailability(productId, quantity, availableStock);
            
            Product product = productDAO.getProductById(productId);
            updateCart(productId, quantity, product);
            
        } catch (SQLException e) {
            throw new ProductNotFoundException("Database error: " + e.getMessage());
        }
    }
    
    private void validateProductExists(int productId) throws SQLException, ProductNotFoundException {
        if (productDAO.getProductById(productId) == null) {
            throw new ProductNotFoundException("Product with ID " + productId + " not found");
        }
    }
    
    private int getAvailableStock(int productId) throws SQLException {
        return productDAO.getStockQuantity(productId);
    }
    
    private void validateStockAvailability(int productId, int quantity, int availableStock) 
            throws OutOfStockException {
        if (availableStock < quantity) {
            throw new OutOfStockException("Only " + availableStock + " items available in stock");
        }
        
        int existingQuantity = getExistingQuantityInCart(productId);
        if (existingQuantity > 0 && (availableStock < existingQuantity + quantity)) {
            throw new OutOfStockException("Cannot add " + quantity + " more. Only " + 
                (availableStock - existingQuantity) + " additional items available");
        }
    }
    
    private int getExistingQuantityInCart(int productId) {
        return cartItems.stream()
                .filter(item -> item.getProduct().getId() == productId)
                .mapToInt(CartItem::getQuantity)
                .findFirst()
                .orElse(0);
    }
    
    private void updateCart(int productId, int quantity, Product product) {
        cartItems.stream()
                .filter(item -> item.getProduct().getId() == productId)
                .findFirst()
                .ifPresentOrElse(
                    item -> item.setQuantity(item.getQuantity() + quantity),
                    () -> cartItems.add(new CartItem(product, quantity))
                );
    }
    
    public void removeFromCart(int productId) {
        Iterator<CartItem> iterator = cartItems.iterator();
        while (iterator.hasNext()) {
            CartItem item = iterator.next();
            if (item.getProduct().getId() == productId) {
                iterator.remove();
                return;
            }
        }
    }
    
    public void updateQuantity(int productId, int newQuantity) 
            throws ProductNotFoundException, OutOfStockException {
        try {
            if (newQuantity <= 0) {
                removeFromCart(productId);
                return;
            }
            
            int availableStock = productDAO.getStockQuantity(productId);
            if (availableStock < newQuantity) {
                throw new OutOfStockException("Only " + availableStock + " items available in stock");
            }
            
            boolean productFound = false;
            for (CartItem item : cartItems) {
                if (item.getProduct().getId() == productId) {
                    item.setQuantity(newQuantity);
                    productFound = true;
                    break;
                }
            }
            
            if (!productFound) {
                throw new ProductNotFoundException("Product not found in cart");
            }
        } catch (SQLException e) {
            throw new ProductNotFoundException("Database error: " + e.getMessage());
        }
    }
    
    public double calculateTotalPrice() {
        return cartItems.stream()
                .mapToDouble(CartItem::getTotalPrice)
                .sum();
    }
    
    public List<CartItem> getCartItems() {
        return new ArrayList<>(cartItems);
    }
    
    public void clearCart() {
        cartItems.clear();
    }
}