package com.ecommerce.dao;

import com.ecommerce.exception.OutOfStockException;
import com.ecommerce.exception.ProductNotFoundException;
import com.ecommerce.model.Product;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ProductDAO {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/EcommerceData";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "Mysql@123";

    public List<Product> getAllProducts() throws SQLException {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT id, name, price, description FROM products";

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                products.add(mapProductFromResultSet(rs));
            }
        }
        return products;
    }

    public Product getProductById(int id) throws SQLException, ProductNotFoundException {
        String sql = "SELECT id, name, price, description FROM products WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return mapProductFromResultSet(rs);
                }
            }
        }
        throw new ProductNotFoundException("Product with ID " + id + " not found");
    }

    public int getStockQuantity(int productId) throws SQLException {
        String sql = "SELECT stock_quantity FROM products WHERE id = ?";
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, productId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("stock_quantity");
                }
            }
        }
        return 0;
    }

    public void decreaseStockQuantity(int productId, int quantity) 
            throws SQLException, OutOfStockException {
        String sql = "UPDATE products SET stock_quantity = stock_quantity - ? WHERE id = ? AND stock_quantity >= ?";
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, quantity);
            stmt.setInt(2, productId);
            stmt.setInt(3, quantity);
            
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                throw new OutOfStockException("Insufficient stock for product ID: " + productId);
            }
        }
    }

    private Product mapProductFromResultSet(ResultSet rs) throws SQLException {
        return new Product(
            rs.getInt("id"),
            rs.getString("name"),
            rs.getDouble("price"),
            rs.getString("description")
        );
    }
}