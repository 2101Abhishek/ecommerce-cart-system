package com.ecommerce.dao;

import com.ecommerce.model.CartItem;
import java.sql.*;
import java.util.List;

public class OrderDAO {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/EcommerceData";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "Mysql@123";

    public int createOrder(List<CartItem> items, String customerName, 
            String customerEmail, String customerPhone, 
            String shippingAddress) throws SQLException {
String orderSql = "INSERT INTO orders (total_amount, customer_name, customer_email, " +
            "customer_phone, shipping_address) VALUES (?, ?, ?, ?, ?)";
String itemSql = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)";
String snapshotSql = "INSERT INTO order_cart_snapshots (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)";

try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
conn.setAutoCommit(false);

try {
   // 1. Create order header
   int orderId = createOrderHeader(conn, orderSql, calculateTotal(items), 
                                 customerName, customerEmail, customerPhone, shippingAddress);
   
   // 2. Create order items
   createOrderRecords(conn, itemSql, orderId, items);
   
   // 3. Save cart snapshot
   createOrderRecords(conn, snapshotSql, orderId, items);
   
   conn.commit();
   return orderId;
} catch (SQLException e) {
   conn.rollback();
   throw e;
} finally {
   conn.setAutoCommit(true);
}
}
}

    public void updateOrderStatus(int orderId, String status) throws SQLException {
        String sql = "UPDATE orders SET status = ?, payment_status = ?, inventory_updated = true WHERE id = ?";
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, status);
            stmt.setString(2, status);
            stmt.setInt(3, orderId);
            stmt.executeUpdate();
        }
    }

    private int createOrderHeader(Connection conn, String sql, double total, 
                                String customerName, String customerEmail,
                                String customerPhone, String shippingAddress) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setDouble(1, total);
            stmt.setString(2, customerName);
            stmt.setString(3, customerEmail);
            stmt.setString(4, customerPhone);
            stmt.setString(5, shippingAddress);
            stmt.executeUpdate();
            
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
                throw new SQLException("Failed to get generated order ID");
            }
        }
    }

    private void createOrderRecords(Connection conn, String sql, int orderId, 
                                  List<CartItem> items) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for (CartItem item : items) {
                stmt.setInt(1, orderId);
                stmt.setInt(2, item.getProduct().getId());
                stmt.setInt(3, item.getQuantity());
                stmt.setDouble(4, item.getProduct().getPrice());
                stmt.addBatch();
            }
            stmt.executeBatch();
        }
    }

    private double calculateTotal(List<CartItem> items) {
        return items.stream()
                   .mapToDouble(item -> item.getQuantity() * item.getProduct().getPrice())
                   .sum();
    }
}